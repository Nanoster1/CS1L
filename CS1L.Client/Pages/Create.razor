@page "/create/{NameTest}"
@using CS1L.Shared.Models.Tests
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager 
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />

@*<MudButton OnClick="Save">Сохранить</MudButton>*@
<MudImage Src="images/name.png" Alt="VQuiz" Elevation="25" Class="rounded-lg"
          Style="height:5vh; width:auto; top:5px; position: absolute;" />
<MudContainer Class="d-flex flex-column gap-12">
    
    @foreach (Question question in Questions)
    {
        <MudContainer>
            @*<MudImage Src="images/mony.jpg" Alt="Mony the dog" Elevation="25" Class="rounded-lg"/>*@
            <MudTextField T="string" @bind-Value="question.Text"
                          Label="Текст вопроса" Variant="Variant.Filled"/>
            <MudStack>
                @foreach (var answer in question.Answers)
                {
                    //TODO: номер вопроса
                    <MudContainer Class="d-flex flex-row gap-10 align-baseline">
                        <MudCheckBox @bind-Checked="@(answer.IsCorrect)" Color="Color.Primary"></MudCheckBox>
                        <MudTextField @bind-Value="@answer.Text" Label="Ответ"
                                      Variant="Variant.Text"></MudTextField>
                    </MudContainer>
                }
            </MudStack>
        </MudContainer>
    }

    <MudIconButton Class="add-button" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" OnClick="AddQuestion" Style="width: fit-content; margin: auto;"></MudIconButton>
    <MudContainer class="d-flex flex-row justify-space-between gap-1">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Выйти без сохранения</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Сохранить</MudButton>
    </MudContainer>
</MudContainer>

@code 
{
    [Parameter]
    public string NameTest { get; set; } = string.Empty;
    
    private bool _isDarkMode;

    private MudTheme _theme = new();

    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    
    List<Question> Questions = new List<Question>();

    
    protected async Task OnInitializedAsync()
    {
      
    }

    private void AddQuestion()
    {
        Questions.Add(new Question());
      
        Questions[Questions.Count-1].Answers.Add(new Answer());
        Questions[Questions.Count-1].Answers.Add(new Answer());
        Questions[Questions.Count-1].Answers.Add(new Answer());
        Questions[Questions.Count-1].Answers.Add(new Answer());
        
        StateHasChanged();
    }

    private async Task Save()
    {
        Test test = new Test();
        test.Questions = Questions;
        test.Name = NameTest;
        
        var responce = await HttpClient.PostAsJsonAsync("tests",test);
        NavigationManager.NavigateTo("/");
    }
}