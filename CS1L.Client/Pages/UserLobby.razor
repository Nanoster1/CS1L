@page "/{SessionId}/lobby/user"
@using Microsoft.AspNetCore.SignalR.Client
@using CS1L.Shared.Models.Sessions
@using CS1L.Shared.Models.DTOs
@using CS1L.Shared.Models.Tests
@inject NavigationManager NavigationManager
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />



<MudImage Src="images/name.png" Alt="VQuiz" Elevation="0" Class="rounded-lg"
          Style="height:5vh; width:auto; top:5px; position: absolute;"/>

@if (Session is null)
{
    <MudCard Outlined="true" Style="display: flex; flex-direction:column;">
        <MudCardContent>
            <MudText>Введите имя:</MudText>
            <MudTextField @bind-Value="GameConnectDto.NickName"></MudTextField>
        </MudCardContent>
        <MudCardActions Style="justify-content: space-around;">
              <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Connect">Подключиться</MudButton>
        </MudCardActions>
    </MudCard>
}
else if(!IsStarted)
{
    <MudCard Outlined="true" Class="d-flex justify-space-around">
        <MudCardContent>
            <MudText>Ожидайте начала игры</MudText>
        </MudCardContent>
    </MudCard>
}
else if(IsGame)
{
    <MudContainer Style="width: 85vw;">
        <MudText Style="text-align: justify;" Typo="Typo.subtitle1">
            @SelectQuestion?.Text</MudText>

        <MudChipSet @bind-SelectedChip="selected" Filter="true" 
                    Style="display: flex; flex-direction:column; width: 80vw; padding-bottom: 20px;">
            @for (int i = 0; i < SelectQuestion.Answers.Count; i++)
            {
                <MudChip Style="height: 10vh;" Color="@colors[i]" Value="@i" Text="@SelectQuestion?.Answers[i]?.Text"></MudChip>
            }
        </MudChipSet >
    </MudContainer>

}
else if(!Final)
{
    <MudCard Outlined="true" Class="d-flex justify-space-around">
        <MudCardContent>
            <MudText>У вас @Session.Score поинтов</MudText>
        </MudCardContent>
    </MudCard>
}
else
{
    
    <MudCard Outlined="true" Class="d-flex justify-space-around">
        <MudCardContent>
            <MudContainer>
                    <MudText>
                        Спасибо за игру!
                    </MudText>
                </MudContainer>
                <MudText>У вас @Session.Score поинтов</MudText>
        </MudCardContent>
    </MudCard>
}

@code {

    [Parameter]
    public string SessionId { get; set; } = string.Empty;
    private bool _isDarkMode;
    private bool IsStarted { get; set; }
    private bool IsGame { get; set; } = true;
    private bool Final { get; set; } = false;
    private GameConnectDto GameConnectDto { get; set; } 
    private MudThemeProvider _mudThemeProvider;
    private HubConnection hubConnection = null!;
    private PlayerSession? Session { get; set; }
    private Question? SelectQuestion { get; set; }
    MudChip selected;
    
    private Color[] colors = new Color[]{ Color.Primary, Color.Secondary, Color.Tertiary, Color.Warning };

    
    protected override async Task OnInitializedAsync()
    {
        GameConnectDto = new GameConnectDto() {VkId = 1,HostId = Guid.Parse(SessionId)};
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/session"))
            .Build();

        hubConnection.On<PlayerSession>("Connected", session =>
        {
            Session = session;
            Console.WriteLine(Session);
            StateHasChanged();
        });
        
        hubConnection.On("GameStarted",  () =>
        {
            IsStarted = true;
            StateHasChanged();
        });
        
        hubConnection.On<Question>("Question",  question =>
        {
            IsGame = true;
            SelectQuestion = question;
            StateHasChanged();
        });
       
        hubConnection.On("GameEnded", 
             async () =>  {
                      
                      if (SelectQuestion!.Answers[(int)selected.Value].IsCorrect)
                      {
                          Session!.Score += 1;
                      }
                        IsGame = false;
                        await hubConnection.SendAsync("Answer",Session.HostId,Session!.Id,Session.Score); // TODO ЧТО ЕЩЁ ЗА IDANSWER?
                        StateHasChanged();
        }); 
        
         hubConnection.On("GameFullEnded", 
             () =>  {
                        IsGame = false;
                        Final = true;
                        StateHasChanged();
            }); 
        
        await hubConnection.StartAsync();
        
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    private async Task Connect()
    {
        await hubConnection.SendAsync("Connect",GameConnectDto);
        
    }
    
}