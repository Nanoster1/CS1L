@page "/table"
@using CS1L.Shared.Models.Tests
@using CS1L.Shared.Models.DTOs
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudImage Src="images/name.png" Alt="VQuiz" Elevation="25" Class="rounded-lg"
          Style="height:5vh; width:auto; top:5px; position: absolute;" />

<MudContainer>
    <MudIconButton Color="Color.Tertiary" Style="top:100px; position:absolute;" Variant="Variant.Outlined">
                           <MudText>Назад</MudText>
    </MudIconButton>
    <MudStack Style="display: flex">
        @foreach(var item in AllTests)
        { 
            <MudContainer Style="display: flex; flex-direction:row; align-items:center; justify-content:center; gap:7vw;">
                <MudContainer Class="flex-grow-1 order-0">
                    <MudText Style="font-size: x-large;">@item.Name</MudText>
                </MudContainer>
                <MudContainer Class="order-2">
                    <MudText Style="font-size: x-large;">@item.Questions.Count</MudText>
                </MudContainer>

                <MudIconButton Style="height: 50px; width: 50px;" Class="order-3" Icon="@Icons.Material.Filled.ArrowForwardIos"
                           Variant="Variant.Outlined" OnClick="() => { CreateLobby(item.Id); }"/>
            </MudContainer>
        }
    </MudStack>
</MudContainer>


@code {

    private bool _isDarkMode;

    private MudTheme _theme = new();

    private MudThemeProvider _mudThemeProvider;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    List<Test> AllTests = new List<Test>();
    
    protected override async Task OnInitializedAsync()
    {
        /*AllTests = new List<Test>()
        {
            new Test()
            {
                Name = "Название побольше для 11б",
                Questions = new List<Question>()
                {
                    new Question(),
                    new Question()
                }
            }
        };*/
     AllTests = (await HttpClient.GetFromJsonAsync<List<Test>>("tests"))!;
    }

    async Task CreateLobby(int TestId)
    { //TODO Добавить id юзера
        NavigationManager.NavigateTo($"/{TestId}/lobby/host");
    }
}